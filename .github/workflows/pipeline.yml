# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# Test application
# Deploy to Docker hub
# Deploy to Heroku

name: Deployment pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]
    types: [opened, synchronize]
jobs:
  build_test_deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: "temurin"
          cache: maven
      - name: build, clean, test
        run: |
          cd backend && mvn clean package
      # - name: e2e test
      #   run: |
      #     npm run e2e-test
      - name: Deploy to Heroku
        if: ${{ github.ref_name == 'main' }}
        uses: gonuit/heroku-docker-deploy@v1.3.3 # This is the actual action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}} # should be unique
          email: ${{secrets.HEROKU_EMAIL}}
      - name: Push to Docker Hub
        if: ${{ github.ref_name == 'main' }}
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: jonas51/movies-api
          tags: latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    # package:
    #   needs: [build_test_deploy]
    #   name: Packaging backend
    #   if: ${{ github.ref_name == 'main' }}
    #   runs-on: ubuntu-latest
    #   env:
    #     GH_TOKEN: ${{secrets.GH_TOKEN}}
    #     GH_USERNAME: jonas56
    #     GH_DOCKER_REGISTRY: ghcr.io
    #   steps:
    #     - uses: actions/checkout@v3
    #     - name: Docker login
    #       run: |
    #         docker login $GH_DOCKER_REGISTRY -u $GH_USERNAME -p $GH_TOKEN
    #     - name: Build docker image
    #       run: docker build . --file Dockerfile-pckg -t $GH_DOCKER_REGISTRY/$GH_USERNAME/$IMAGE_NAME:$IMAGE_TAGNAME
    #     - name: Docker push
    #       run: docker push $GH_DOCKER_REGISTRY/$GH_USERNAME/$IMAGE_NAME:$IMAGE_TAGNAME
